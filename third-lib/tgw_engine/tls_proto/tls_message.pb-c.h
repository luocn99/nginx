/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tls_message.proto */

#ifndef PROTOBUF_C_tls_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_tls_5fmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TlsMessage TlsMessage;
typedef struct _RsaRemoteReq RsaRemoteReq;
typedef struct _RsaRemoteRsp RsaRemoteRsp;


/* --- enums --- */


/* --- messages --- */

struct  _TlsMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_version;
  int32_t version;
  protobuf_c_boolean has_id;
  int32_t id;
  char *private_key;
  char *encryt_txt;
};
#define TLS_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tls_message__descriptor) \
    , 0,0, 0,0, NULL, NULL }


struct  _RsaRemoteReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  protobuf_c_boolean has_version;
  int32_t version;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_from_len;
  int32_t from_len;
  protobuf_c_boolean has_padding;
  int32_t padding;
  protobuf_c_boolean has_public_key;
  ProtobufCBinaryData public_key;
  protobuf_c_boolean has_private_key;
  ProtobufCBinaryData private_key;
  protobuf_c_boolean has_msg;
  ProtobufCBinaryData msg;
  protobuf_c_boolean has_private_key_len;
  int32_t private_key_len;
};
#define RSA_REMOTE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rsa_remote_req__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0 }


struct  _RsaRemoteRsp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  protobuf_c_boolean has_version;
  int32_t version;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_padding;
  int32_t padding;
  protobuf_c_boolean has_msg;
  ProtobufCBinaryData msg;
};
#define RSA_REMOTE_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rsa_remote_rsp__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,{0,NULL} }


/* TlsMessage methods */
void   tls_message__init
                     (TlsMessage         *message);
size_t tls_message__get_packed_size
                     (const TlsMessage   *message);
size_t tls_message__pack
                     (const TlsMessage   *message,
                      uint8_t             *out);
size_t tls_message__pack_to_buffer
                     (const TlsMessage   *message,
                      ProtobufCBuffer     *buffer);
TlsMessage *
       tls_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tls_message__free_unpacked
                     (TlsMessage *message,
                      ProtobufCAllocator *allocator);
/* RsaRemoteReq methods */
void   rsa_remote_req__init
                     (RsaRemoteReq         *message);
size_t rsa_remote_req__get_packed_size
                     (const RsaRemoteReq   *message);
size_t rsa_remote_req__pack
                     (const RsaRemoteReq   *message,
                      uint8_t             *out);
size_t rsa_remote_req__pack_to_buffer
                     (const RsaRemoteReq   *message,
                      ProtobufCBuffer     *buffer);
RsaRemoteReq *
       rsa_remote_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rsa_remote_req__free_unpacked
                     (RsaRemoteReq *message,
                      ProtobufCAllocator *allocator);
/* RsaRemoteRsp methods */
void   rsa_remote_rsp__init
                     (RsaRemoteRsp         *message);
size_t rsa_remote_rsp__get_packed_size
                     (const RsaRemoteRsp   *message);
size_t rsa_remote_rsp__pack
                     (const RsaRemoteRsp   *message,
                      uint8_t             *out);
size_t rsa_remote_rsp__pack_to_buffer
                     (const RsaRemoteRsp   *message,
                      ProtobufCBuffer     *buffer);
RsaRemoteRsp *
       rsa_remote_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rsa_remote_rsp__free_unpacked
                     (RsaRemoteRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TlsMessage_Closure)
                 (const TlsMessage *message,
                  void *closure_data);
typedef void (*RsaRemoteReq_Closure)
                 (const RsaRemoteReq *message,
                  void *closure_data);
typedef void (*RsaRemoteRsp_Closure)
                 (const RsaRemoteRsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tls_message__descriptor;
extern const ProtobufCMessageDescriptor rsa_remote_req__descriptor;
extern const ProtobufCMessageDescriptor rsa_remote_rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tls_5fmessage_2eproto__INCLUDED */
